/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "ApplicationController.h"
#include "SamplerWaveformControl.h"
#include "StepSequencerControl.h"
#include "Parameter.h"

#define NUM_SLICES 4

//==============================================================================
GrainerAudioProcessorEditor::GrainerAudioProcessorEditor(GrainerAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter), 
	  controller(nullptr),
	  gainLabel("", "Gain"),
	  speedLabel("", "Speed"),
	  //grainsLabel("", "Grains"),
	  numSlicesLabel("", "Num Slices"),
	  pitchLabel("", "Pitch"),
	  filePathLabel("", "Sample: ")
{
	Font labelFont(14.f, Font::FontStyleFlags::bold);
	Font valueFont(14.f);
	
	addAndMakeVisible(&selectSampleButton);
	selectSampleButton.setButtonText("...");
	selectSampleButton.setTooltip("Load a new sample");
	selectSampleButton.setBounds(20, 20, 30, 20);
	selectSampleButton.addListener(this);

	addAndMakeVisible(&filePathLabel);
	filePathLabel.setFont(labelFont);
	filePathLabel.setBounds(50, 20, 50, 20);

	addAndMakeVisible(&filePathValueLabel);
	filePathValueLabel.setFont(valueFont);
	filePathValueLabel.setBounds(100, 20, 600, 20);

	addAndMakeVisible(&gainSlider);
	gainSlider.setDoubleClickReturnValue(true, .9f);
	gainSlider.setBounds(20, 80, 100, 100);
	gainSlider.setRange(0, 1.0);
	gainSlider.setSliderStyle(Slider::SliderStyle::RotaryVerticalDrag);
	gainSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::TextBoxBelow, false, 100, 20);
	gainSlider.addListener(this);
    gainLabel.attachToComponent (&gainSlider, false);
    gainLabel.setFont(labelFont);
	
	addAndMakeVisible(&speedSlider);
	speedSlider.setDoubleClickReturnValue(true, 1.f);
	speedSlider.setBounds(170, 80, 100, 100);
	speedSlider.setRange(0, 2.0);
	speedSlider.setSliderStyle(Slider::SliderStyle::RotaryVerticalDrag);
	speedSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::TextBoxBelow, false, 100, 20);
	speedSlider.addListener(this);
    speedLabel.attachToComponent (&speedSlider, false);
    speedLabel.setFont(labelFont);
	/*
	addAndMakeVisible(&grainsSlider);
	grainsSlider.setDoubleClickReturnValue(true, .5f);
	grainsSlider.setBounds(320, 80, 100, 100);
	grainsSlider.setRange(0, 1.0);
	grainsSlider.setSliderStyle(Slider::SliderStyle::RotaryVerticalDrag);
	grainsSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::TextBoxBelow, false, 100, 20);
	grainsSlider.addListener(this);
    grainsLabel.attachToComponent (&grainsSlider, false);
    grainsLabel.setFont(labelFont);
	*/
	/*
	addAndMakeVisible(&pitchSlider);
	pitchSlider.setDoubleClickReturnValue(true, 0.f);
	pitchSlider.setBounds(320, 80, 100, 100);
	pitchSlider.setRange(-2.f, 2.0f);
	pitchSlider.setSliderStyle(Slider::SliderStyle::RotaryVerticalDrag);
	pitchSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::TextBoxBelow, false, 100, 20);
	pitchSlider.addListener(this);
    pitchLabel.attachToComponent (&pitchSlider, false);
    pitchLabel.setFont(labelFont);
	*/
	addAndMakeVisible(&numSlicesComboBox);
	numSlicesComboBox.setBounds(320, 80, 80, 20);
	numSlicesComboBox.addItem("4", 4);
	numSlicesComboBox.addItem("8", 8);
	numSlicesComboBox.addItem("16", 16);
	numSlicesComboBox.setSelectedId(8);
	numSlicesComboBox.addListener(this);
    numSlicesLabel.attachToComponent (&numSlicesComboBox, false);
    numSlicesLabel.setFont(labelFont);
	
	addAndMakeVisible(&directionButton);
	directionButton.setBounds(320, 160, 80, 20);
	directionButton.setButtonText("Reverse");
	directionButton.addListener(this);

	waveform = new SamplerWaveformControl(numSlicesComboBox.getSelectedId());
	addAndMakeVisible(waveform);
	waveform->setBounds(20, 200, 760, 200);

	sequencer = new StepSequencerControl(16, 16);
	addAndMakeVisible(sequencer);
	sequencer->setBounds(20, 420, 760, 260);

    setSize (800, 700);
}

GrainerAudioProcessorEditor::~GrainerAudioProcessorEditor()
{
	if (this->controller != nullptr) {
		this->controller->endUITimer();
	}
	this->waveform = nullptr;
}

void GrainerAudioProcessorEditor::initialize(ApplicationController *controller)
{
	this->controller = controller;

	if (this->controller != nullptr) {
		waveform->initialize(this->controller);
		sequencer->initialize(this->controller);

		auto parameters = controller->getAllParameters();
		
		for (auto parameter : parameters) {
			setParameterValue(parameter->getParameterID(), parameter->getValue());
		}

		this->controller->beginUITimer();
	}
}


//==============================================================================
void GrainerAudioProcessorEditor::paint (Graphics &g)
{
    g.fillAll(Colours::white);
}


void GrainerAudioProcessorEditor::mouseDown(const MouseEvent &/*event*/)
{
}

void GrainerAudioProcessorEditor::mouseDrag(const MouseEvent &/*event*/)
{
}

void GrainerAudioProcessorEditor::buttonClicked (Button *button)
{
	jassert(controller != nullptr);

	if (button == &selectSampleButton) {
		WildcardFileFilter wildcardFilter ("*.wav", String::empty, "WAV files");

		FileBrowserComponent browser(FileBrowserComponent::canSelectFiles | FileBrowserComponent::openMode,
										File::nonexistent,
										&wildcardFilter,
										nullptr);

		FileChooserDialogBox dialogBox ("Select a sample",
										"Select a new sample to load...",
										browser,
										false,
										Colours::lightgrey);
		if (dialogBox.show())
		{
			File file = browser.getSelectedFile(0);
			var path = file.getFullPathName();
			this->setParameterValue(ParameterID::Sampler_FilePath, path);
			controller->updateParameterModel(ParameterID::Sampler_FilePath, path);
		}
	}
}

void GrainerAudioProcessorEditor::buttonStateChanged(Button* button)
{
	jassert(controller != nullptr);

	if (button == &directionButton) {
		bool isReverse = button->getToggleState();
		bool wasReverse = (bool)controller->getParameterValue(ParameterID::Sampler_Direction) == false;

		if (isReverse != wasReverse) {
			controller->updateParameterModel(ParameterID::Sampler_Direction, isReverse ? false : true);
		}
	}
}

void GrainerAudioProcessorEditor::comboBoxChanged(ComboBox *comboBoxThatHasChanged)
{
	if (comboBoxThatHasChanged == &numSlicesComboBox) {
		int id = numSlicesComboBox.getSelectedId();
		controller->updateParameterModel(ParameterID::Sampler_NumSlices, id);
		waveform->setNumSlices(id);
		sequencer->setNumStepsAndRows(id, id);
	}
}

void GrainerAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
	jassert(controller != nullptr);

	if (slider == &gainSlider) {
		controller->updateParameterModel(ParameterID::Sampler_Gain, (float)slider->getValue());
	}
	else if (slider == &speedSlider) {
		controller->updateParameterModel(ParameterID::Sampler_Speed, (float)slider->getValue());
	}/*
	else if (slider == &grainsSlider) {
		controller->updateParameterModel(GlobalParameter::Sampler_GrainSize, (float)slider->getValue());
	}*/
}

void GrainerAudioProcessorEditor::changeListenerCallback (ChangeBroadcaster* /*source*/)
{
}

void GrainerAudioProcessorEditor::setParameterValue(ParameterID parameter, var value)
{
	switch(parameter)
	{
	case ParameterID::Sampler_Gain:
		gainSlider.setValue((float)value, NotificationType::dontSendNotification);
		break;
	case ParameterID::Sampler_Speed:
		speedSlider.setValue((float)value, NotificationType::dontSendNotification);
		break;
		/*
	case GlobalParameter::Sampler_GrainSize:
		grainsSlider.setValue((float)value, NotificationType::dontSendNotification);
		break;
		*/
	case ParameterID::Sampler_Direction:
		directionButton.setToggleState((bool)value == false, NotificationType::dontSendNotification);
		break;
	case ParameterID::Sampler_Pitch:
		pitchSlider.setValue((float)value, NotificationType::dontSendNotification);
		break;
	case ParameterID::Sampler_FilePath:
		{
			File file((String)value);
			
			if (file.exists()) {
				waveform->setSource(new FileInputSource(file));
			}

			filePathValueLabel.setText((String)value, NotificationType::dontSendNotification);
		}
		break;
	case ParameterID::Sampler_Phase:
		waveform->setWaveformPosition((float)value);
		break;
	case ParameterID::Sampler_NumSlices:
		numSlicesComboBox.setSelectedId((int)value, NotificationType::dontSendNotification);
		waveform->setNumSlices((int)value);
		sequencer->setNumStepsAndRows((int)value, (int)value);
		break;
	case ParameterID::Sequencer_AllValues:
		sequencer->setAllValues(value.getArray());
		break;
	case ParameterID::Sequencer_CurrentStep:
		sequencer->setCurrentStep((int)value);
		break;
	}
}